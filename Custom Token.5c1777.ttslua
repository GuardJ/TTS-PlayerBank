function onload()
    --self.createButton(test)
    do --Start Create Buttons
        --button order here determines its index? starting at index 0
        self.createButton(b_display)        --<-index 0
        self.createButton(b_miniDisplay)    --<-index 1

        self.createButton(b_white)
        self.createButton(b_red)
        self.createButton(b_orange)
        self.createButton(b_yellow)
        self.createButton(b_green)
        self.createButton(b_blue)
        self.createButton(b_purple)
        self.createButton(b_pink)

        self.createButton(b_PayPlayer)
        self.createButton(b_Request)
        self.createButton(b_PayPlayerMini)
        self.createButton(b_RequestMini)
        self.createButton(b_PayAll)

        self.createButton(b_b0)
        self.createButton(b_b1)
        self.createButton(b_b2)
        self.createButton(b_b3)
        self.createButton(b_b4)
        self.createButton(b_b5)
        self.createButton(b_b6)
        self.createButton(b_b7)
        self.createButton(b_b8)
        self.createButton(b_b9)
        self.createButton(b_reset)
        self.createButton(b_colorReset)
    end --End Create Buttons

    do --Start Global VAriables
        pBank_Balance = 0
        colorChoice = nil
        inTransaction = false


        pOwner_ttsColor = 'Unclaimed'
        pOwner_Name = 'Unclaimed'
        pBank_GUID = self.get_GUID()
        pOwner = {pOwner_ttsColor,pOwner_Name,pBank_GUID}

        playerList = {}

        colorsIndex = 2-1
        buttonsColors = {b_white,b_red,b_orange,b_yellow,b_green,b_blue,b_purple,b_pink}
        posOriginals = {}

        pOwnerB={'Nobody', 'Nobody', ''}
    end --End Global VAriables

    get_StartingMoney()
    set_pOwner('Blue') --for debug
end

--players cannot pay themselves

--[=====[
    copy/paste for comment block
    status = xpcall( myfunction, myerrorhandler )
    print(status)
--]=====]

--this get_s updated with global startingMoney upon this objects OnLoad
--using get_StartingMoney

function none()
    --placeholder
end

function myerrorhandler( err )
   print( "ERROR: ", err )
end
function myfunction ()
   n = n/nil
end

--status = xpcall( myfunction, myerrorhandler )
--print(status)

do --Getters
    function get_pOwner()
        return pOwner
    end

    function get_pBank()
        return true
    end

    function get_InTransaction()
        return inTransaction
    end

    function get_StartingMoney()
        pBank_Balance = Global.call('get_StartingMoney')
        b_display.label = '$'..pBank_Balance
        self.editButton(b_display) --updates index 0 button?
    end

    function get_MiniDisplayAmmount()
        ammount = 0

        miniLabel = b_miniDisplay.label
        leadSymbol = string.sub(miniLabel,1,1)

        if (leadSymbol == '+' or leadSymbol =='-') then
            miniLabel = b_miniDisplay.label
            labelNumbers = leadSymbol..string.sub(miniLabel,3)
            ammount = tonumber(labelNumbers)
        end

        return ammount
    end

    function set_pOwnerB()
        objList = getAllObjects()
        tempOwnerB ={}

        for _, obj in pairs(objList) do
            if obj.call('get_pBank') == true then
                tempOwnerB[1],tempOwnerB[2],tempOwnerB[3] =
                    obj.call('get_pOwner')[1],
                    obj.call('get_pOwner')[2],
                    obj.call('get_pOwner')[3]
                if tempOwnerB[1] ~= 'Unclaimed' and tempOwnerB[1] ~= pOwner[1] then
                    if tempOwnerB[1] == colorChoice then
                        pOwnerB = tempOwnerB
                        return true
                    end
                end
            end
        end
    end
end--Getters

function clear_pOwnerB()
    pOwnerB = {'Nobody', 'Nobody', ''}
    colorChoice = nil
end

do --Setters
end--setters

do --prob uselesss
    function updatePlayerList(clicker_Color)
        for _, player in pairs(playerList) do
            if playerList[_] == clicker_Color then
                return
            elseif _ == #playerList then
                playerList[_+1] = clicker_Color
                for _, player in pairs(playerList) do
                    if _ ~= nil then
                        Player[player].call('updatePlayerList', clicker_Color)
                    end
                end
            end
        end
    end

    function colorToRGB(clicker_Color)
        for _, colorRGB in pairs(ttsColors) do
            if ttsColors[_][4] == colorSet then
                rgbValue = {ttsColors[1],ttsColors[2],ttsColors[3],1}
                return rgbValue
            end
        end
    end
end

do --NumPad Display Interaction
    function b0() b('0') end function b1() b('1') end function b2() b('2') end
    function b3() b('3') end function b4() b('4') end function b5() b('5') end
    function b6() b('6') end function b7() b('7') end function b8() b('8') end
    function b9() b('9') end
    function br() entryZero() end

    function clear() --clears the b_miniDisplay
        newValue = ''
        b_miniDisplay.label = newValue
        self.editButton({index=1, label=newValue})
    end

    function b(n)
        checkZero()
        b_miniDisplay.label = b_miniDisplay.label .. n
        newValue = b_miniDisplay.label
        self.editButton({index=1, label=newValue})
    end

    function checkZero()
        value = b_miniDisplay.label
        if value == "$0" then
            b_miniDisplay.label = "$"
        elseif value == "+$0" then
            b_miniDisplay.label = "+$"
        elseif value == "-$0" then
            b_miniDisplay.label = "-$"
        end
    end

    function entryZero()
        newValue = "$0"
        b_miniDisplay.label = '$0'
        b_miniDisplay.click_function = 'clear'
        self.editButton({index=1, label=newValue})
    end
end --NumPad Display Interaction

do --Color Buttons Interaction
    do --Color Buttons Relay
        function white()  p(ttsColors[1],b_white)  end function red()    p(ttsColors[2],b_red)    end
        function orange() p(ttsColors[3],b_orange) end function yellow() p(ttsColors[4],b_yellow) end
        function green()  p(ttsColors[5],b_green)  end function blue()   p(ttsColors[6],b_blue)   end
        function purple() p(ttsColors[7],b_purple) end function pink()   p(ttsColors[8],b_pink)   end
    end --Color Buttons Relay

    do
        function p(color, button)
            if color[4] ~= pOwner[1] then
                inTransaction = true
                colorChoice = color[4]
                --broadcastToAll(color[4]..'test')
                --broadcastToAll(pOwnerB[1]..'test')

                --HAVE TO CHECK IF THE COLOR PICKED IS A VALID PLAYER BANK
                if set_pOwnerB() == true then
                    broadcastToAll('test3')
                    b_miniDisplay.color = button.color
                    self.editButton({index=1,color=button.color})

                    colorsHide()
                end
            elseif color[4] == pOwner[1] then
                message = 'You may not complete a transaction with yourself!'
                --broadcastToColor(message, pOwner[1], pOwner[1])
                broadcastToAll(message)
            end
        end

        function requestedP(params)
            inTransaction = true

            pOwnerB, ammount = params[1],params[2]

            b_miniDisplay.color = pOwnerB[1]
            ammount = '-$'..ammount
            b_miniDisplay.label = ammount
            self.editButton({index=1,label=ammount,color=pOwnerB[1]})

            colorsHide()
        end

        function colorsHide()
            for _, buttonColor in pairs(buttonsColors) do
                posCurrent = buttonsColors[_].position
                posOriginals[_] = posCurrent
                posHidden = {posCurrent[1], 0, posCurrent[3]}

                buttonsColors[_].position = posHidden
                buttonsColors[_].rotation = {180,0,0}
                self.editButton({index=_+colorsIndex, position=posHidden, rotation={180,0,0}})
            end

            miniShow()
        end

        function cr()
            colorChoice = nil
            inTransaction = false
            clear_pOwnerB()
            entryZero()
            colorsShow()
        end

        function colorsShow()
            for _, buttonColor in pairs(buttonsColors) do
                buttonsColors[_].position = posOriginals[_]
                x = posOriginals[_][1]
                z = posOriginals[_][2]
                y = posOriginals[_][3]
                buttonsColors[_].rotation = {0,0,0}
                self.editButton({index=_+ colorsIndex, position={x,z,y}, rotation={0,0,0}})
            end

            miniHide()
        end
    end

    function miniShow()
        posMiniShow = {pos00[1]-0, pos00[2], pos00[3]+0.3}
        rotMiniShow = {0,0,0}
        b_miniDisplay.position = posMiniShow
        self.editButton({index=1, position=posMiniShow, rotation=rotMiniShow})
    end
    function miniHide()
        posMiniHide = {pos00[1]-0, 0, pos00[3]+0.3}
        rotMiniHide = {180,0,0}
        b_miniDisplay.position = posMiniHide
        self.editButton({index=1, position=posMiniHide, rotation=rotMiniHide})
    end
end --Color Buttons Interaction

function moneyPayPlayer()
    miniLabel = b_miniDisplay.label
    leadSymbol = string.sub(miniLabel,1,1)

    if leadSymbol == '$' then
        newValue = '-'..b_miniDisplay.label
        b_miniDisplay.label = newValue
        self.editButton({index=1,label=newValue})
    end
    if leadSymbol == '+' then
        newValue = '-'..string.sub(b_miniDisplay.label,2)
        b_miniDisplay.label = newValue
        self.editButton({index=1,label=newValue})
    end
end

function moneyRequest()
    miniLabel = b_miniDisplay.label
    leadSymbol = string.sub(miniLabel,1,1)

    if leadSymbol == '$' then
        newValue = '+'..b_miniDisplay.label
        b_miniDisplay.label = newValue
        self.editButton({index=1,label=newValue})
    end
    if leadSymbol == '-' then
        newValue = '+'..string.sub(b_miniDisplay.label,2)
        b_miniDisplay.label = newValue
        self.editButton({index=1,label=newValue})
    end
end

function requestToPlayerB(ammount)
    params = {pOwner, ammount}
    pOwnerBInTrans = pOwnerB[3].call('get_InTransaction')

    if pOwnerBInTrans == false then
        pOwnerB[3].call('requestedP', params)

        broadcastAmmount = string.sub(miniLabel,2)
        broadcastToAll(pOwner[2]..' requests ' .. broadcastAmmount..' from '..pOwnerB[2]..'!')
    elseif pOwnerBInTrans == true then
        message = pOwnerB[2]..' is already in a transaction. Please wait.'
        --broadcastToColor(message, pOwner[1], pOwnerB[1])
        broadcastToAll(message)
    end
    --request is either sent or fails
    inTransaction = false
    clear_pOwnerB()
end

function sentPayment(params)
    pOwnerB, sAmmount = params[1], params[2]

    pBank_Balance = pBank_Balance + sAmmount
    newValue = '$'..tostring(pBank_Balance)
    b_display.label = newValue
    self.editButton({index=0,label=newValue})

    message = pOwner[2]..' received $'..sAmmount..' from '..pOwnerB[2]
    broadcastToAll(message)
end

function payPlayer(dAmmount)
    params = {pOwner, dAmmount}

    pOwnerB[3].call('sentPayment',params)

    message = 'You paid $'..dAmmount..' to '..pOwnerB[2]
    --broadcastToColor(message, pOwner[1], pOwnerB[1])
    broadcastToAll(message)
end

function confirm()
    if pOwnerB[1] ~= 'Nobody' then
        miniLabel = b_miniDisplay.label
        leadSymbol = string.sub(miniLabel,1,1)

        if (leadSymbol == '+' or leadSymbol =='-') then
            dAmmount = get_MiniDisplayAmmount()
            if leadSymbol == '-' then
                pBank_Balance = pBank_Balance + dAmmount
                newValue = '$'..tostring(pBank_Balance)
                b_display.label = newValue
                self.editButton({index=0,label=newValue})

                payPlayer(-dAmmount)
            elseif leadSymbol == '+' then
                requestToPlayerB(dAmmount)
            end
            cr()
        end
    end
end

do --Main Display
    function bDisplay(obj,clicker_Color,alt_click)
        set_pOwner(clicker_Color)   --player who clicks main display claims the bank
    end

    function set_pOwner(clicker_Color)
        if pOwner_ttsColor == 'Unclaimed' then
            pOwner_ttsColor = clicker_Color

            if Player[pOwner_ttsColor].steam_name == nil then
                pOwner_Name = pOwner_ttsColor
            else
                pOwner_Name = Player[pOwner_ttsColor].steam_name
            end

            pOwner = {pOwner_ttsColor, pOwner_Name, getObjectFromGUID(pBank_GUID)}

            b_display.color = clicker_Color
            self.editButton({index=0,color=clicker_Color})

            updatePlayerList(clicker_Color)
        elseif pOwner_ttsColor ~= 'Unclaimed' then
            message = 'This is already owned by '
            --broadcastToColor(message..pOwner_Name, clicker_Color, pOwner_ttsColor)
            broadcastToAll(message)
        end
    end
end --Main Display

do
    ttsColors = {
        {1,1,1,'White'}, {0.856, 0.1, 0.094,'Red'}, {0.956, 0.392, 0.113,'Orange'}, {0.905, 0.898, 0.172,'Yellow'},
        {0.192, 0.701, 0.168,'Green'}, {0.118, 0.53, 1,'Blue'}, {0.627, 0.125, 0.941,'Purple'}, {0.96, 0.439, 0.807,'Pink'}
                }

    --Positions are {x,z,y}
    pos00 = {0,0.1,-1}   --Origin for DISPLAY
    do --Start Display Parameters
        b_display = {
            index=0, label='$---',
            click_function='bDisplay', function_owner=self,
            position={pos00[1]-0, pos00[2], pos00[3]-0},
            width=700, height=100, font_size=100,
            color={1,1,1}
        }
        b_miniDisplay = {
            index=0, label='$0',
            click_function='confirm', function_owner=self,
            position={pos00[1]-0, pos00[2]-pos00[2], pos00[3]+0.3},
            rotation={180,0,0},
            width=300, height=100, font_size=70,
            color={1,1,1}
        }
    end --End Display Parameters

    pos01 = {-0,0.1,-0}  --Origin for Action Buttons
    do--Start Action Button Parameters
        b_PayPlayer = {
            label='Pay', click_function='moneyPayPlayer', function_owner=self,
            position={pos01[1]-0, pos01[2], pos01[3]-0.3}, width=500, height=100,
            color={1, 1, 1}
        }

        b_Request = {
            label='Request', click_function='moneyRequest', function_owner=self,
            position={pos01[1]-0, pos01[2], pos01[3]+0}, width=500, height=100,
            color={1, 1, 1}
        }

        b_PayPlayerMini = {
            click_function='get_MiniDisplayAmmount', function_owner=self,
            position={pos01[1]-0.7, pos01[2], pos01[3]-0.65}, width=200, height=100,
            color={1, 1, 1}
        }

        b_RequestMini = {
            click_function='none', function_owner=self,
            position={pos01[1]+0.7, pos01[2], pos01[3]-0.65}, width=200, height=100,
            color={1, 1, 1}
        }

        b_PayAll = {
            click_function='none', function_owner=self,
            position={pos01[1]-0, pos01[2], pos01[3]+0.3}, width=500, height=100,
            color={1, 1, 1}
        }
    end--End Action Button Parameters

    pos08 = {0,0.1,-0.65} --Origin For Color Buttons
    do --Start Color Button Parameters
        b_white = {
            click_function='white', function_owner=self,
            position={pos08[1]-0.3, pos08[2], pos08[3]-0.1}, width=100, height=100,
            color={1, 1, 1}
        }

        b_red = {
            click_function='red', function_owner=self,
            position={pos08[1]-0.1, pos08[2], pos08[3]-0.1}, width=100, height=100,
            color={0.856, 0.1, 0.094}
        }

        b_orange = {
            click_function='orange', function_owner=self,
            position={pos08[1]+0.1, pos08[2], pos08[3]-0.1}, width=100, height=100,
            color={0.956, 0.392, 0.113}
        }

        b_yellow = {
            click_function='yellow', function_owner=self,
            position={pos08[1]+0.3, pos08[2], pos08[3]-0.1}, width=100, height=100,
            color={0.905, 0.898, 0.172}
        }
        ---------------------------
        b_green = {
            click_function='green', function_owner=self,
            position={pos08[1]-0.3, pos08[2], pos08[3]+0.1}, width=100, height=100,
            color={0.192, 0.701, 0.168}
        }

        b_blue = {
            click_function='blue', function_owner=self,
            position={pos08[1]-0.1, pos08[2], pos08[3]+0.1}, width=100, height=100,
            color={0.118, 0.53, 1}
        }

        b_purple = {
            click_function='purple', function_owner=self,
            position={pos08[1]+0.1, pos08[2], pos08[3]+0.1}, width=100, height=100,
            color={0.627, 0.125, 0.941}
        }

        b_pink = {
            click_function='pink', function_owner=self,
            position={pos08[1]+0.3, pos08[2], pos08[3]+0.1}, width=100, height=100,
            color={0.96, 0.439, 0.807}
        }
    end --End Color Button Parameters

    --{0,0.1,0.3}
    pos09 = {2,0.1,0}  --Origin For NumPad Buttons
    do --Start NumPad Button Parameters
        b_b0 = {
            label='0', click_function='b0', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ 0 ,pos09[2]+ 0 ,pos09[3]+ 0 },
            rotation={0,0,0}
        }
        b_b1 = {
            label='1', click_function='b1', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (-0.2) ,pos09[2]+ 0 ,pos09[3]+ (-0.2) }
        }
        b_b2 = {
            label='2', click_function='b2', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ 0 ,pos09[2]+ 0 ,pos09[3]+ (-0.2) }
        }
        b_b3 = {
            label='3', click_function='b3', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (0.2) ,pos09[2]+ 0 ,pos09[3]+ (-0.2) }
        }
        b_b4 = {
            label='4', click_function='b4', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (-0.2) ,pos09[2]+ 0 ,pos09[3]+ (-0.4) }
        }
        b_b5 = {

            label='5', click_function='b5', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ 0 ,pos09[2]+ 0 ,pos09[3]+ (-0.4) }
        }
        b_b6 = {
            label='6', click_function='b6', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (0.2) ,pos09[2]+ 0 ,pos09[3]+ (-0.4) }
        }
        b_b7 = {
            label='7', click_function='b7', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (-0.2) ,pos09[2]+ 0 ,pos09[3]+ (-0.6) }
        }
        b_b8 = {
            label='8', click_function='b8', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ 0 ,pos09[2]+ 0 ,pos09[3]+ (-0.6) }
        }
        b_b9 = {
            label='9', click_function='b9', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (0.2) ,pos09[2]+ 0 ,pos09[3]+ (-0.6) }
        }
        b_reset = {
            label='$0', click_function='br', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (0.2) ,pos09[2]+ 0 ,pos09[3]+ (0) }
        }
        b_colorReset = {
            label='C', click_function='cr', function_owner=self,
            width=100, height=100, font_size=60,
            position={pos09[1]+ (-0.2) ,pos09[2]+ 0 ,pos09[3]+ (0) }
        }
    end --End NumPad Button Parameters
end